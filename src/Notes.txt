------------------------------TestNG class01-------------------------------------
TestNG:
is a testing tool that helps us to structure our test cases using different annotations

Benefits of NG:
1. Reports
2. Annotations e.g.@Test, @before, @beforeclass
3. Parallel testing
4. batch execution
5. Assertions ---> Hard Assertions, SoftAssertions
6. Data Parameterization

it can be itegrated with cucmber, maven, and selenium.

1. Annotations:
There is no need for a main method.

--> annotation is a tag that provides additional information about a class, interface, or method in TestNG
--> anotation is used to keep the structure of our test cases.

@Test
@BeforeMethod
@AfterMethod
@BeforeClass
@AfterClass

1. @Test
You should write your test cases under this automation.
This is the main annotation in TestNG
By default TestNG executes the methods in alphabetical order.

2. @BeforeMethod:
runs every time before the @test is executed
also called pre-condition

3. @AfterMethod:
runs after each @test method
also called post condition

before method is a pre-condition that must run before every trst case and the post condition will run afer
the test case has ended

Priority:
by default the priority is zero of all the test case
in order to give them a priority order
use @Test(priority = 1)

Enabled:
@Test(enabled = false) --> will not run the test cases that are set false
be default, all test cases are set to enabled = true

DependsOn:
@Test(dependsOnMethods = "methodName")
will only run if the dependent method has passed successfully, else it will be skipped

HardAssertions:
we have hardAssertion in testNG
in order to use the assertion we use

Assert.assertiontype()

Assert.assertTrue();

1. Assert.assertEquals(String1, String2);
it passes if String1 equals String2
it fails if String1 does not equal to String 2

2. Assert.assertTrue(boolean variable);
checks the status of a boolean variable
it passes if the boolean is TRUE
it fails if the boolean is FALSE

In hard Assertions, if we have multiple assertions, as soon as one of them fails,
it quits checking the other assertions and declared the test case as failed

SoftAssertions:
soft assertions continues to check all the assertions regardless of the fact even if one or more assertions
have failed, which is not the scenario in case of Hard Assertions(they stop execution when even one assertion fails).

in order to use soft assertion
1. declaration

SoftAssert soft = new SoftAssert();

2. soft.assertEquals(String, String) instead of Assert.assertEquals(String, String)

at the end, you must do

3. soft.assertAll();

After the declaration when you use soft.assert, it just checks the assertion, but
does not take any action or display any output.

Once all the assertions are done, then you use
soft.assertAll();
to compile the result of all the assertion and show you the results on the screen.

------------------------------TestNG class02-------------------------------------
testNG XML:
gives you control over the execution of your whole project

<suite>
    <test>
      <package>
           <classes>
                <method>
                </method>
           </classes>
       </package>
    </test>
</suite>

@BeforeClass:
this annotation is used to execute the method only once before the execution of the class

@AfterClass:
this annotation is used to execute the method only once after the execution of the class


@BeforeTest:
this annotation is used to execute the method only once before the execution of the test

@AfterTest:
this annotation is used to execute the method only once after the execution of the test

------------------------------TestNG class03-------------------------------------
TestNG XML?
Helps us to control the execution of the test cases!!

<suite>
    <test>
           <classes>
                <class name = "class name"/>
                <class name = "class 1"/>
                                  <methods>
                                         <include name = "test1"/>
                                  </methods>
           </classes>
       <packages>
                <package name = "package name"/>
       </packages>
    </test>
</suite>

@BeforeMethod
public void method1(){
}

@AfterMethod
public void method2(){
}

@Test
public void test1(){
}

**when we run a specific method from a class, if it has any before and after method rhey will also be executed even
if we do not select them to run

**Executing our test case on group level

1. When we execute on XML using groups, by default the @Before and @After method WILL NOT EXECUTE.
ONLY the methods tagged under that particular group will be executed

IN order to deal with this problem, by default the @BeforeMethod where we are doing some initialization we
use the following:

put (alwaysrun=true) in front of your @Before and @AfterMethod

whenever you are running by groups and you get an error of NULL pointer exception the first thing to check is...
"@BeforeMethod21 is set to always run"

Listeners Class:
listens to events like test failed/passed/skipped e.t.c.
once the test case has executed
and it either fails/pass/ skips
depending upon the status
listeners class takes you to the execution of the code that your have written for the scenarios
if your test case fails/pass/or skips

Implementation of listeners class:

Listeners class implements ITestListeners
which is an interface from TestNG,
and we OVERRIDE the functions according to our need

after that you need to link the listeners class to the class on which you want it
to listen that can be done using TestNG.XML

you define your <listeners> tag just under <suite> and then write down the classes you want it to listen to.

DataProvider in TestNG:
Data provider is used for data driven testing
Use data provider for small data sets
for greater one, use excel

if we want to declare our data set, it must be under @dataprovider

if we want our test case to utilize this dataprovider
what do we need to do?
@test(dataprovider = "name of dataprovider")
public void test(){

}

Parallel Testing:




